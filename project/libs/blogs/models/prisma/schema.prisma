// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  VIDEO
  TEXT
  QUOTE
  PHOTO
  LINK
}

model Post {
  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  authorId String @map("author_id")
  isDraft Boolean @map("is_draft")
  repostFrom String? @map("repost_from")
  type PostType
  tags Tag[]
  comments Comment[]
  likes Like[]
  @@map("posts")
}

model Tag {
  id  String @id @default(uuid())
  title String
  posts Post[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  @@map("tags")
}

model Comment {
  id String @id @default(uuid())
  text String
  authorId String @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  postId String @map("post_id")
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("comments")
}

model Like {
  id String @id @default(uuid())
  userId String @map("user_id")
  postId String @map("post_id")
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("likes")
}
